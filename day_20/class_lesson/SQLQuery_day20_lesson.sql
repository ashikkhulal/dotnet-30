/*
Day 20 topics:
1. SQL views
2. SQL joins
*/

USE MyLocalDb;

CREATE TABLE EMPLOYEE_APPLE(
	APPLE_ID [int] NOT NULL,
	FIRST_NAME [nvarchar](50),
	LAST_NAME [nvarchar](50),
	SALARY [decimal](18,2),
	JOB_TITLE [nvarchar](50),
	ENTRY_DATE [datetime],
	CONSTRAINT [PK_EMPLOYEE_APPLE] PRIMARY KEY CLUSTERED (APPLE_ID));

INSERT INTO EMPLOYEE_APPLE
    (APPLE_ID, FIRST_NAME, LAST_NAME, SALARY, JOB_TITLE, ENTRY_DATE)
VALUES 
    (1, 'CHIN', 'YEN', 145000.00, 'LAB ASSISTANT', GETDATE()),
    (2, 'MIKE', 'PEARL', 170000.00, 'SR. ACCOUNTANT', GETDATE()),
    (3, 'GREEN', 'FIELD', 100000.00, 'ACCOUNTANT', GETDATE()),
    (4, 'DEWANE', 'PAUL', 150000.00, 'PROGRAMMER', GETDATE()),
    (5, 'MATTS', 'SR.', 150000.00, 'PROGRAMMER', GETDATE()),
    (6, 'PLANK', 'OTO', 100000.00, 'ACCOUNTANT', GETDATE()),
	(7, 'DEWANE', 'PAUL', 150000.00, 'PROGRAMMER', GETDATE()),
    (8, 'MATTS', 'JR.', 120000.00, 'JR. PROGRAMMER', GETDATE()),
    (9, 'PLANK', 'MOTTO', 170000.00, 'SR. ACCOUNTANT', GETDATE()),
	(10, 'PLANK', 'ONE', 100000.00, 'ACCOUNTANT', GETDATE());

CREATE TABLE EMPLOYEE_GOOGLE(
	GOOGLE_ID [int] NOT NULL,
	FIRST_NAME [nvarchar](50),
	LAST_NAME [nvarchar](50),
	SALARY [decimal](18,2),
	JOB_TITLE [nvarchar](50),
	ENTRY_DATE [datetime],
	CONSTRAINT [PK_EMPLOYEE_GOOGLE] PRIMARY KEY CLUSTERED (GOOGLE_ID));

INSERT INTO EMPLOYEE_GOOGLE
    (GOOGLE_ID, FIRST_NAME, LAST_NAME, SALARY, JOB_TITLE, ENTRY_DATE)
VALUES 
    (1, 'CHEN', 'YEN', 175000.00, 'SR. LAB ASSISTANT', GETDATE()),
    (2, 'HIKE', 'PEARL', 130000.00, 'ACCOUNTANT', GETDATE()),
    (3, 'BROWN', 'FIELD', 100000.00, 'JR. ACCOUNTANT', GETDATE()),
    (4, 'DEWANE', 'PAUL', 150000.00, 'PROGRAMMER', GETDATE()),
    (5, 'WATTS', 'SR.', 150000.00, 'PROGRAMMER', GETDATE()),
    (6, 'BURP', 'OTO', 100000.00, 'ACCOUNTANT', GETDATE()),
	(7, 'WYANE', 'PAUL', 150000.00, 'PROGRAMMER', GETDATE()),
    (8, 'MATTS', 'JR.', 120000.00, 'JR. PROGRAMMER', GETDATE()),
    (9, 'JOHN', 'MOTTO', 130000.00, 'SR. ACCOUNTANT', GETDATE()),
	(10, 'PLANK', 'ONE', 100000.00, 'JR. ACCOUNTANT', GETDATE());

--SQL views: replica of the some or all of table(s) for data presentation
CREATE VIEW APPLE_FIVE_EMPLOYEE_DATA AS
SELECT TOP 5 * FROM EMPLOYEE_APPLE;

CREATE VIEW GOOGLE_FIVE_EMPLOYEE_DATA AS
SELECT TOP 5 * FROM EMPLOYEE_GOOGLE;

--returns number of rows as a count value
SELECT COUNT(*) FROM EMPLOYEE_APPLE;

--SQL joins:
/*
Unmatched join type:
- Cross join: also a raw join; simple multiplication of tables which are being joined

Matched join type:
ON keyword is used to match the data
- Inner join: matching values from both the tables

SYNTAX:
SELECT <> FROm <TABLE_1> INNER JOIN <TABLE_2> ON TABLE_1.COLUMN = TABLE_2.COLUMN;

- We can add more inner join as necessary with on conditions.

*/
SELECT * FROM EMPLOYEE_APPLE INNER JOIN EMPLOYEE_GOOGLE ON EMPLOYEE_APPLE.APPLE_ID = EMPLOYEE_GOOGLE.GOOGLE_ID;

/*
- Outer join:
1. Left outer join: left hand side full records and right hand side only matching records
2. Right outer join: right hand side full records and left hand side only matching records
3. Full outer join: all matching records and, left and right hand side full unmatching records
*/

SELECT * FROM EMPLOYEE_APPLE LEFT JOIN EMPLOYEE_GOOGLE ON EMPLOYEE_APPLE.FIRST_NAME = EMPLOYEE_GOOGLE.FIRST_NAME;
SELECT * FROM EMPLOYEE_APPLE RIGHT JOIN EMPLOYEE_GOOGLE ON EMPLOYEE_APPLE.FIRST_NAME = EMPLOYEE_GOOGLE.FIRST_NAME;
SELECT * FROM EMPLOYEE_APPLE FULL JOIN EMPLOYEE_GOOGLE ON EMPLOYEE_APPLE.FIRST_NAME = EMPLOYEE_GOOGLE.FIRST_NAME;

/*
- Self join: join of the table with itself
*/
SELECT * FROM EMPLOYEE_APPLE EMPA1, EMPLOYEE_APPLE EMP2;

--Clean up:
ALTER TABLE EMPLOYEE_APPLE
DROP CONSTRAINT PK_EMPLOYEE_APPLE;

ALTER TABLE EMPLOYEE_GOOGLE
DROP CONSTRAINT PK_EMPLOYEE_GOOGLE;

DROP VIEW APPLE_FIVE_EMPLOYEE_DATA;
DROP VIEW GOOGLE_FIVE_EMPLOYEE_DATA;

DROP TABLE EMPLOYEE_APPLE;
DROP TABLE EMPLOYEE_GOOGLE;